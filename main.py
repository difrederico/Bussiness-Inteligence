#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Mercado em N√∫meros - Leitor de Cupons Fiscais
Interface moderna com c√¢mera integrada e funcionalidades completas

Funcionalidades:
- C√¢mera em tempo real para leitura de QR codes
- Upload de arquivos de imagem
- Modo r√°pido para leitura em lote
- Gerenciamento completo de chaves salvas
- Interface moderna e profissional

Autor: Business Intelligence
Data: Outubro 2025
"""

from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.scrollview import ScrollView
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.togglebutton import ToggleButton
from kivy.uix.switch import Switch
from kivy.uix.screenmanager import ScreenManager, Screen, NoTransition
from kivy.clock import Clock
from kivy.uix.popup import Popup
from kivy.uix.filechooser import FileChooserIconView
from kivy.metrics import dp, sp
from kivy.utils import get_color_from_hex
from kivy.graphics import Color, Rectangle, RoundedRectangle
from kivy.uix.widget import Widget
import json
import re
import os
import csv
import time
import threading
import platform
from datetime import datetime

# Detec√ß√£o inteligente de depend√™ncias dispon√≠veis
# Tenta importar cada biblioteca e define disponibilidade automaticamente

# Detec√ß√£o de plataforma
IS_ANDROID = hasattr(platform, 'android') or 'ANDROID_ROOT' in os.environ

# Tenta importar OpenCV
CV2_AVAILABLE = False
try:
    import cv2
    CV2_AVAILABLE = True
    print("‚úÖ OpenCV dispon√≠vel")
except ImportError:
    print("‚ö†Ô∏è OpenCV n√£o dispon√≠vel - usando fallback")

# Tenta importar pyzbar
PYZBAR_AVAILABLE = False
try:
    from pyzbar import pyzbar
    PYZBAR_AVAILABLE = True
    print("‚úÖ Pyzbar dispon√≠vel")
except ImportError:
    print("‚ö†Ô∏è Pyzbar n√£o dispon√≠vel - usando entrada manual")

# Tenta importar numpy
NUMPY_AVAILABLE = False
try:
    import numpy as np
    NUMPY_AVAILABLE = True
    print("‚úÖ Numpy dispon√≠vel")
except ImportError:
    print("‚ö†Ô∏è Numpy n√£o dispon√≠vel")

# Kivy Camera
try:
    from kivy.uix.camera import Camera
    CAMERA_AVAILABLE = True
    print("‚úÖ Kivy Camera dispon√≠vel")
except ImportError:
    CAMERA_AVAILABLE = False
    print("‚ùå Kivy Camera n√£o dispon√≠vel")

# Cores do sistema (baseado na imagem)
COLORS = {
    'primary': get_color_from_hex('#007AFF'),      # Azul sistema
    'primary_dark': get_color_from_hex('#0056D3'), # Azul escuro
    'accent': get_color_from_hex('#34C759'),       # Verde sucesso
    'error': get_color_from_hex('#FF3B30'),        # Vermelho erro
    'warning': get_color_from_hex('#FF9500'),      # Laranja aviso
    'background': get_color_from_hex('#F2F2F7'),   # Cinza claro de fundo
    'surface': get_color_from_hex('#FFFFFF'),      # Branco cart√£o
    'card_dark': get_color_from_hex('#1C1C1E'),    # Cart√£o escuro
    'text': get_color_from_hex('#000000'),         # Texto prim√°rio
    'text_secondary': get_color_from_hex('#8E8E93'), # Texto secund√°rio
    'text_light': get_color_from_hex('#FFFFFF'),   # Texto claro
    'separator': get_color_from_hex('#C6C6C8'),    # Linha separadora
}


class SavedKey:
    """Classe para representar uma chave fiscal salva"""
    
    def __init__(self, key, timestamp=None):
        self.key = key
        self.timestamp = timestamp or datetime.now().timestamp()
        
    def to_dict(self):
        return {
            'key': self.key,
            'timestamp': self.timestamp
        }
    
    @classmethod
    def from_dict(cls, data):
        return cls(data['key'], data.get('timestamp'))
    
    def get_formatted_date(self):
        return datetime.fromtimestamp(self.timestamp).strftime('%d/%m/%Y %H:%M')


class ModernCard(FloatLayout):
    """Widget de cart√£o moderno com bordas arredondadas e sombra"""
    
    def __init__(self, bg_color=COLORS['surface'], **kwargs):
        super().__init__(**kwargs)
        self.bg_color = bg_color
        
        with self.canvas.before:
            Color(*self.bg_color)
            self.rect = RoundedRectangle(
                pos=self.pos,
                size=self.size,
                radius=[dp(12)]
            )
        
        self.bind(pos=self.update_rect, size=self.update_rect)
    
    def update_rect(self, *args):
        self.rect.pos = self.pos
        self.rect.size = self.size


class CameraWidget(ModernCard):
    """Widget de c√¢mera moderna com controles integrados"""
    
    def __init__(self, app_instance, **kwargs):
        super().__init__(bg_color=COLORS['card_dark'], **kwargs)
        self.app_instance = app_instance
        self.is_scanning = False
        self.camera = None
        
        # Layout principal
        layout = BoxLayout(orientation='vertical', padding=dp(20), spacing=dp(15))
        
        # T√≠tulo da se√ß√£o
        title = Label(
            text='üì∑ Ler com a C√¢mera',
            font_size=sp(18),
            color=COLORS['primary'],
            size_hint_y=None,
            height=dp(30),
            halign='left'
        )
        title.bind(size=title.setter('text_size'))
        layout.add_widget(title)
        
        # √Årea da c√¢mera
        camera_area = ModernCard(bg_color=(0.1, 0.1, 0.1, 1))
        camera_area.size_hint_y = 0.6
        
        if CAMERA_AVAILABLE and IS_ANDROID:
            # C√¢mera apenas no Android - INICIA PARADA
            try:
                self.camera = Camera(play=False, resolution=(640, 480))  # ‚úÖ play=False
                camera_area.add_widget(self.camera)
            except Exception as e:
                placeholder = Label(
                    text=f'‚ùå Erro na c√¢mera:\n{str(e)[:50]}...\n\nUse entrada manual',
                    font_size=sp(14),
                    color=COLORS['error'],
                    halign='center'
                )
                placeholder.bind(size=placeholder.setter('text_size'))
                camera_area.add_widget(placeholder)
        else:
            # Placeholder no desktop ou quando c√¢mera indispon√≠vel
            message = 'ÔøΩÔ∏è Desktop Mode\n\nüì± C√¢mera funciona no Android\n\n‚å®Ô∏è Use Entrada Manual para testes'
            placeholder = Label(
                text=message,
                font_size=sp(14),
                color=COLORS['text_secondary'],
                halign='center'
            )
            placeholder.bind(size=placeholder.setter('text_size'))
            camera_area.add_widget(placeholder)
        
        layout.add_widget(camera_area)
        
        # Controles da c√¢mera otimizados para touch
        controls = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(60), spacing=dp(15))
        
        # Bot√£o Iniciar C√¢mera com tamanho touch-friendly
        self.camera_btn = Button(
            text='üì∏ Iniciar C√¢mera',
            font_size=sp(16),
            background_color=COLORS['primary'],
            size_hint_x=0.5
        )
        self.camera_btn.bind(on_press=self.toggle_camera)
        controls.add_widget(self.camera_btn)
        
        # Switch Modo R√°pido otimizado para touch
        rapid_layout = BoxLayout(orientation='horizontal', size_hint_x=0.5, spacing=dp(10))
        
        rapid_label = Label(
            text='R√°pido',
            font_size=sp(14),
            color=COLORS['text'],
            size_hint_x=0.6
        )
        rapid_layout.add_widget(rapid_label)
        
        self.rapid_switch = Switch(
            size_hint_x=0.4,
            active=False
        )
        self.rapid_switch.bind(active=self.toggle_rapid_mode)
        rapid_layout.add_widget(self.rapid_switch)
        
        controls.add_widget(rapid_layout)
        
        layout.add_widget(controls)
        
        # Status da √∫ltima leitura
        self.status_label = Label(
            text='√öltima chave lida: Nenhuma',
            font_size=sp(12),
            color=COLORS['warning'],
            size_hint_y=None,
            height=dp(25),
            halign='left'
        )
        self.status_label.bind(size=self.status_label.setter('text_size'))
        layout.add_widget(self.status_label)
        
        self.add_widget(layout)
        
        # Auto-scan se dispon√≠vel
        if CV2_AVAILABLE and PYZBAR_AVAILABLE and CAMERA_AVAILABLE:
            Clock.schedule_interval(self.scan_frame, 1.0)
    
    def toggle_camera(self, instance):
        """Liga/desliga c√¢mera"""
        if CAMERA_AVAILABLE and self.camera:
            if self.is_scanning:
                self.camera.play = False
                self.is_scanning = False
                self.camera_btn.text = 'Iniciar C√¢mera'
                self.camera_btn.background_color = COLORS['primary']
            else:
                self.camera.play = True
                self.is_scanning = True
                self.camera_btn.text = 'Parar C√¢mera'
                self.camera_btn.background_color = COLORS['error']
        else:
            self.app_instance.show_message('C√¢mera n√£o dispon√≠vel neste dispositivo', 'Aviso')
    
    def toggle_rapid_mode(self, instance, value):
        """Liga/desliga modo r√°pido"""
        self.app_instance.rapid_mode = value
        if value:
            self.app_instance.show_toast('Modo r√°pido ativado - Leitura cont√≠nua', 'success')
        else:
            self.app_instance.show_toast('Modo r√°pido desativado', 'info')
    
    def scan_frame(self, dt):
        """Escaneia frame da c√¢mera por QR codes"""
        if not self.is_scanning or not CV2_AVAILABLE or not PYZBAR_AVAILABLE:
            return True
        
        try:
            # Aqui seria implementada a captura e processamento do frame
            # Por agora, simula detec√ß√£o aleat√≥ria para demonstra√ß√£o
            if hasattr(self, 'last_scan') and time.time() - self.last_scan < 2:
                return True
            
            # Simula processamento (em implementa√ß√£o real, capturaria da c√¢mera)
            # self.process_camera_frame()
            
        except Exception as e:
            print(f"Erro no scan: {e}")
        
        return True
    
    def process_qr_detection(self, qr_data):
        """Processa QR code detectado"""
        self.last_scan = time.time()
        self.status_label.text = f'√öltima chave lida: {qr_data[:15]}...'
        self.status_label.color = COLORS['accent']
        self.app_instance.process_qr_data(qr_data)


class SavedKeysWidget(ModernCard):
    """Widget moderno para chaves salvas"""
    
    def __init__(self, app_instance, **kwargs):
        super().__init__(**kwargs)
        self.app_instance = app_instance
        
        # Layout principal
        layout = BoxLayout(orientation='vertical', padding=dp(20), spacing=dp(15))
        
        # Cabe√ßalho
        header = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(40))
        
        title = Label(
            text='Chaves Salvas',
            font_size=sp(18),
            color=COLORS['text'],
            size_hint_x=0.6,
            halign='left'
        )
        title.bind(size=title.setter('text_size'))
        header.add_widget(title)
        
        # Bot√£o Gerando...
        self.generate_btn = Button(
            text='Gerando...',
            font_size=sp(14),
            background_color=COLORS['primary'],
            size_hint_x=0.4,
            size_hint_y=None,
            height=dp(35)
        )
        self.generate_btn.bind(on_press=self.app_instance.export_csv)
        header.add_widget(self.generate_btn)
        
        layout.add_widget(header)
        
        # Campo de pesquisa
        search_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(55), spacing=dp(10))
        
        search_icon = Label(
            text='üîç',
            font_size=sp(18),
            size_hint_x=None,
            width=dp(35)
        )
        search_layout.add_widget(search_icon)
        
        self.search_input = TextInput(
            hint_text='Pesquisar chaves...',
            font_size=sp(16),
            multiline=False,
            background_color=COLORS['background'],
            foreground_color=COLORS['text'],
            padding=[dp(15), dp(10)]  # Padding interno para toque mais f√°cil
        )
        self.search_input.bind(text=self.app_instance.on_search_change)
        search_layout.add_widget(self.search_input)
        
        layout.add_widget(search_layout)
        
        # Lista de chaves
        self.scroll = ScrollView()
        self.keys_layout = BoxLayout(orientation='vertical', spacing=dp(10), size_hint_y=None)
        self.keys_layout.bind(minimum_height=self.keys_layout.setter('height'))
        self.scroll.add_widget(self.keys_layout)
        layout.add_widget(self.scroll)
        
        # Status
        self.status_label = Label(
            text='Nenhuma chave salva ainda.',
            font_size=sp(14),
            color=COLORS['text_secondary'],
            size_hint_y=None,
            height=dp(30),
            halign='center'
        )
        self.status_label.bind(size=self.status_label.setter('text_size'))
        layout.add_widget(self.status_label)
        
        self.add_widget(layout)
    
    def update_keys_list(self, keys, search_term=""):
        """Atualiza lista de chaves"""
        self.keys_layout.clear_widgets()
        
        filtered_keys = []
        for key_obj in keys:
            if not search_term or search_term.lower() in key_obj.key.lower():
                filtered_keys.append(key_obj)
        
        if filtered_keys:
            self.status_label.text = f'{len(filtered_keys)} chave(s) encontrada(s)'
            
            for key_obj in filtered_keys[:10]:  # Limita a 10 para performance
                key_item = self.create_key_item(key_obj)
                self.keys_layout.add_widget(key_item)
        else:
            if search_term:
                self.status_label.text = f'Nenhuma chave encontrada para "{search_term}"'
            else:
                self.status_label.text = 'Nenhuma chave salva ainda.'
    
    def create_key_item(self, key_obj):
        """Cria item visual para uma chave"""
        item = ModernCard(bg_color=COLORS['background'])
        item.size_hint_y = None
        item.height = dp(80)
        
        layout = BoxLayout(orientation='horizontal', padding=dp(15), spacing=dp(10))
        
        # Info da chave
        info_layout = BoxLayout(orientation='vertical', size_hint_x=0.7)
        
        key_label = Label(
            text=f'{key_obj.key[:12]}...{key_obj.key[-8:]}',
            font_size=sp(14),
            color=COLORS['text'],
            size_hint_y=0.6,
            halign='left'
        )
        key_label.bind(size=key_label.setter('text_size'))
        info_layout.add_widget(key_label)
        
        date_label = Label(
            text=key_obj.get_formatted_date(),
            font_size=sp(12),
            color=COLORS['text_secondary'],
            size_hint_y=0.4,
            halign='left'
        )
        date_label.bind(size=date_label.setter('text_size'))
        info_layout.add_widget(date_label)
        
        layout.add_widget(info_layout)
        
        # Bot√µes de a√ß√£o
        actions = BoxLayout(orientation='horizontal', size_hint_x=0.3, spacing=dp(5))
        
        copy_btn = Button(
            text='üìã',
            font_size=sp(12),
            background_color=COLORS['primary'],
            size_hint_x=0.5
        )
        copy_btn.bind(on_press=lambda x: self.app_instance.copy_key(key_obj))
        actions.add_widget(copy_btn)
        
        delete_btn = Button(
            text='üóëÔ∏è',
            font_size=sp(12),
            background_color=COLORS['error'],
            size_hint_x=0.5
        )
        delete_btn.bind(on_press=lambda x: self.app_instance.delete_key(key_obj))
        actions.add_widget(delete_btn)
        
        layout.add_widget(actions)
        
        item.add_widget(layout)
        return item


class ManualInputWidget(ModernCard):
    """Widget para entrada manual de chaves fiscais"""
    
    def __init__(self, app_instance, **kwargs):
        super().__init__(bg_color=COLORS['surface'], **kwargs)
        self.app_instance = app_instance
        
        layout = BoxLayout(orientation='vertical', padding=dp(20), spacing=dp(15))
        
        # T√≠tulo
        title = Label(
            text='‚å®Ô∏è Entrada Manual de Chave Fiscal',
            font_size=sp(18),
            color=COLORS['primary'],
            size_hint_y=None,
            height=dp(30),
            halign='center'
        )
        title.bind(size=title.setter('text_size'))
        layout.add_widget(title)
        
        # Instru√ß√µes
        instruction = Label(
            text='Digite ou cole a chave fiscal de 44 d√≠gitos:',
            font_size=sp(14),
            color=COLORS['text'],
            size_hint_y=None,
            height=dp(25),
            halign='left'
        )
        instruction.bind(size=instruction.setter('text_size'))
        layout.add_widget(instruction)
        
        # Campo de entrada otimizado para Android
        self.key_input = TextInput(
            hint_text='Digite ou cole a chave de 44 d√≠gitos aqui',
            multiline=False,
            size_hint_y=None,
            height=dp(60),
            font_size=sp(16),
            background_color=COLORS['background'],
            foreground_color=COLORS['text'],
            input_type='number',  # Teclado num√©rico no Android
            padding=[dp(15), dp(15)]  # Padding interno para toque mais f√°cil
        )
        layout.add_widget(self.key_input)
        
        # Bot√µes otimizados para touch
        buttons = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(60), spacing=dp(15))
        
        validate_btn = Button(
            text='‚úÖ Validar e Salvar',
            font_size=sp(16),
            background_color=COLORS['accent']
        )
        validate_btn.bind(on_press=self.validate_key)
        buttons.add_widget(validate_btn)
        
        clear_btn = Button(
            text='üßπ Limpar',
            font_size=sp(16),
            background_color=COLORS['text_secondary']
        )
        clear_btn.bind(on_press=self.clear_input)
        buttons.add_widget(clear_btn)
        
        layout.add_widget(buttons)
        
        # Status/resultado
        self.result_label = Label(
            text='üí° Digite uma chave fiscal de 44 d√≠gitos para validar',
            font_size=sp(12),
            color=COLORS['primary'],
            size_hint_y=None,
            height=dp(40),
            halign='center'
        )
        self.result_label.bind(size=self.result_label.setter('text_size'))
        layout.add_widget(self.result_label)
        
        # Exemplo
        example_layout = BoxLayout(orientation='vertical', size_hint_y=None, height=dp(60), spacing=dp(5))
        
        example_title = Label(
            text='üìã Exemplo de chave v√°lida:',
            font_size=sp(12),
            color=COLORS['text_secondary'],
            size_hint_y=None,
            height=dp(20),
            halign='left'
        )
        example_title.bind(size=example_title.setter('text_size'))
        example_layout.add_widget(example_title)
        
        example_key = Label(
            text='35200114200166000166550010000000491819777770',
            font_size=sp(11),
            color=COLORS['text_secondary'],
            size_hint_y=None,
            height=dp(20),
            halign='left'
        )
        example_key.bind(size=example_key.setter('text_size'))
        example_layout.add_widget(example_key)
        
        copy_example_btn = Button(
            text='üìã Copiar Exemplo',
            font_size=sp(14),
            background_color=COLORS['primary'],
            size_hint_y=None,
            height=dp(48)  # Tamanho m√≠nimo Material Design para touch
        )
        copy_example_btn.bind(on_press=self.copy_example)
        example_layout.add_widget(copy_example_btn)
        
        layout.add_widget(example_layout)
        
        self.add_widget(layout)
    
    def validate_key(self, instance):
        """Valida e salva chave inserida"""
        key = self.key_input.text.strip()
        
        if not key:
            self.show_result('‚ö†Ô∏è Digite uma chave fiscal', 'warning')
            return
        
        # Remove caracteres n√£o num√©ricos
        key = re.sub(r'[^0-9]', '', key)
        
        if len(key) != 44:
            self.show_result(f'‚ùå Chave deve ter 44 d√≠gitos (atual: {len(key)})', 'error')
            return
        
        if self.app_instance.validate_access_key(key):
            # Verifica duplicata
            if any(item.key == key for item in self.app_instance.saved_keys):
                self.show_result('‚ö†Ô∏è Esta chave j√° foi salva anteriormente', 'warning')
                return
            
            # Salva chave
            from datetime import datetime
            new_key = SavedKey(key)
            self.app_instance.saved_keys.insert(0, new_key)
            self.app_instance.save_keys_to_file()
            
            self.show_result('‚úÖ Chave fiscal v√°lida e salva com sucesso!', 'success')
            self.clear_input(None)
            self.app_instance.update_keys_display()
        else:
            self.show_result('‚ùå Chave fiscal inv√°lida - Verifique os d√≠gitos', 'error')
    
    def clear_input(self, instance):
        """Limpa campo de entrada"""
        self.key_input.text = ''
        self.show_result('üßπ Campo limpo - Digite nova chave fiscal', 'info')
    
    def copy_example(self, instance):
        """Copia exemplo para o campo"""
        example_key = '35200114200166000166550010000000491819777770'
        self.key_input.text = example_key
        self.show_result('üìã Exemplo copiado - Clique em Validar para testar', 'info')
    
    def show_result(self, message, msg_type='info'):
        """Mostra resultado da valida√ß√£o"""
        colors = {
            'success': COLORS['accent'],
            'error': COLORS['error'], 
            'warning': COLORS['warning'],
            'info': COLORS['primary']
        }
        
        self.result_label.text = message
        self.result_label.color = colors.get(msg_type, COLORS['primary'])


class UploadWidget(ModernCard):
    """Widget para upload de arquivos"""
    
    def __init__(self, app_instance, **kwargs):
        super().__init__(bg_color=COLORS['card_dark'], **kwargs)
        self.app_instance = app_instance
        
        layout = BoxLayout(orientation='vertical', padding=dp(20), spacing=dp(15))
        
        # T√≠tulo
        title = Label(
            text='üìé Enviar Arquivo',
            font_size=sp(18),
            color=COLORS['text_light'],
            size_hint_y=None,
            height=dp(30),
            halign='center'
        )
        title.bind(size=title.setter('text_size'))
        layout.add_widget(title)
        
        # √Årea de upload
        upload_area = ModernCard(bg_color=(0.2, 0.2, 0.2, 1))
        upload_area.size_hint_y = 0.7
        
        upload_layout = BoxLayout(orientation='vertical', padding=dp(20), spacing=dp(10))
        
        upload_icon = Label(
            text='üìÅ',
            font_size=sp(48),
            color=COLORS['text_secondary'],
            size_hint_y=0.5,
            halign='center'
        )
        upload_layout.add_widget(upload_icon)
        
        upload_text = Label(
            text='Toque para selecionar\nima imagem com QR code',
            font_size=sp(14),
            color=COLORS['text_secondary'],
            size_hint_y=0.3,
            halign='center'
        )
        upload_text.bind(size=upload_text.setter('text_size'))
        upload_layout.add_widget(upload_text)
        
        upload_btn = Button(
            text='Escolher Arquivo',
            font_size=sp(14),
            background_color=COLORS['primary'],
            size_hint_y=0.2
        )
        upload_btn.bind(on_press=self.app_instance.upload_image)
        upload_layout.add_widget(upload_btn)
        
        upload_area.add_widget(upload_layout)
        layout.add_widget(upload_area)
        
        self.add_widget(layout)


class CameraScreen(Screen):
    """Tela da c√¢mera com funcionalidades de leitura"""
    
    def __init__(self, app, **kwargs):
        super().__init__(**kwargs)
        self.app = app
        
        layout = BoxLayout(orientation='vertical', padding=dp(10), spacing=dp(10))
        
        # Widget da c√¢mera (55% da tela)
        camera_widget = CameraWidget(app_instance=self.app, size_hint_y=0.55)
        layout.add_widget(camera_widget)
        
        # Widget de chaves salvas (45% da tela) - SEM ScrollView externa
        saved_keys_widget = SavedKeysWidget(app_instance=self.app, size_hint_y=0.45)
        layout.add_widget(saved_keys_widget)
        
        self.add_widget(layout)


class UploadScreen(Screen):
    """Tela de upload de arquivos"""
    
    def __init__(self, app, **kwargs):
        super().__init__(**kwargs)
        self.app = app
        
        layout = BoxLayout(orientation='vertical', padding=dp(10), spacing=dp(10))
        
        # Widget de upload (40% da tela)
        upload_widget = UploadWidget(app_instance=self.app, size_hint_y=0.4)
        layout.add_widget(upload_widget)
        
        # Widget de chaves salvas (60% da tela)
        saved_keys_widget = SavedKeysWidget(app_instance=self.app, size_hint_y=0.6)
        layout.add_widget(saved_keys_widget)
        
        self.add_widget(layout)


class ManualScreen(Screen):
    """Tela de entrada manual"""
    
    def __init__(self, app, **kwargs):
        super().__init__(**kwargs)
        self.app = app
        
        layout = BoxLayout(orientation='vertical', padding=dp(10), spacing=dp(10))
        
        # Widget de entrada manual (50% da tela)
        manual_input_widget = ManualInputWidget(app_instance=self.app, size_hint_y=0.5)
        layout.add_widget(manual_input_widget)
        
        # Widget de chaves salvas (50% da tela)
        saved_keys_widget = SavedKeysWidget(app_instance=self.app, size_hint_y=0.5)
        layout.add_widget(saved_keys_widget)
        
        self.add_widget(layout)


class MainLayout(BoxLayout):
    """Layout principal da aplica√ß√£o com ScreenManager"""
    
    def __init__(self, app, **kwargs):
        super().__init__(orientation='vertical', **kwargs)
        self.app = app
        
        # === CABE√áALHO FIXO ===
        header = BoxLayout(
            size_hint_y=None, 
            height=dp(80), 
            padding=[dp(20), dp(10)],
            spacing=dp(10)
        )
        
        # Logo e t√≠tulo
        logo = Label(
            text='ÔøΩ',
            font_size=sp(28),
            size_hint_x=None,
            width=dp(50)
        )
        header.add_widget(logo)
        
        title_layout = BoxLayout(orientation='vertical')
        
        main_title = Label(
            text='Mercado em N√∫meros',
            font_size=sp(22),
            color=COLORS['primary'],
            bold=True,
            halign='left',
            size_hint_y=0.6
        )
        main_title.bind(size=main_title.setter('text_size'))
        title_layout.add_widget(main_title)
        
        subtitle = Label(
            text='Leitor de Cupons Fiscais Profissional',
            font_size=sp(14),
            color=COLORS['text_secondary'],
            halign='left',
            size_hint_y=0.4
        )
        subtitle.bind(size=subtitle.setter('text_size'))
        title_layout.add_widget(subtitle)
        
        header.add_widget(title_layout)
        self.add_widget(header)
        
        # === SCREEN MANAGER (√Årea central) ===
        self.screen_manager = ScreenManager(transition=NoTransition())
        
        # Cria√ß√£o das telas
        self.camera_screen = CameraScreen(name='camera', app=self.app)
        self.upload_screen = UploadScreen(name='upload', app=self.app)
        self.manual_screen = ManualScreen(name='manual', app=self.app)
        
        # Adiciona telas ao manager
        self.screen_manager.add_widget(self.camera_screen)
        self.screen_manager.add_widget(self.upload_screen)
        self.screen_manager.add_widget(self.manual_screen)
        
        # Define tela inicial
        self.screen_manager.current = 'camera'
        
        self.add_widget(self.screen_manager)
        
        # === BARRA DE ABAS FIXA NO RODAP√â ===
        tab_bar = BoxLayout(
            size_hint_y=None, 
            height=dp(70), 
            spacing=dp(8), 
            padding=dp(10)
        )
        
        # Bot√µes das abas
        self.camera_tab_button = ToggleButton(
            text='üì∑ C√¢mera',
            font_size=sp(16),
            group='main_tabs',
            state='down',  # Inicia selecionado
            background_color=COLORS['primary']
        )
        self.camera_tab_button.bind(on_press=lambda x: self.change_screen('camera'))
        tab_bar.add_widget(self.camera_tab_button)
        
        self.upload_tab_button = ToggleButton(
            text='üìé Upload',
            font_size=sp(16),
            group='main_tabs',
            background_color=COLORS['text_secondary']
        )
        self.upload_tab_button.bind(on_press=lambda x: self.change_screen('upload'))
        tab_bar.add_widget(self.upload_tab_button)
        
        self.manual_tab_button = ToggleButton(
            text='‚å®Ô∏è Manual',
            font_size=sp(16),
            group='main_tabs',
            background_color=COLORS['text_secondary']
        )
        self.manual_tab_button.bind(on_press=lambda x: self.change_screen('manual'))
        tab_bar.add_widget(self.manual_tab_button)
        
        # Armazena refer√™ncias dos bot√µes para atualizar cores
        self.tab_buttons = {
            'camera': self.camera_tab_button,
            'upload': self.upload_tab_button,
            'manual': self.manual_tab_button
        }
        
        self.add_widget(tab_bar)
    
    def change_screen(self, screen_name):
        """Muda a tela atual e atualiza cores dos bot√µes"""
        self.screen_manager.current = screen_name
        
        # Atualiza cores dos bot√µes
        for name, button in self.tab_buttons.items():
            if name == screen_name:
                button.background_color = COLORS['primary']
            else:
                button.background_color = COLORS['text_secondary']


class MercadoEmNumerosApp(App):
    """Aplicativo principal - Mercado em N√∫meros"""
    
    def build(self):
        """Constr√≥i a interface principal usando ScreenManager"""
        self.title = 'Mercado em N√∫meros - Leitor de Cupons Fiscais'
        
        # Inicializa√ß√£o das vari√°veis de estado
        self.saved_keys = []
        self.rapid_mode = False
        self.current_search = ""
        
        # Carrega dados salvos
        self.load_saved_keys()
        
        # Cria e retorna o layout principal com ScreenManager
        main_layout = MainLayout(app=self)
        
        # Atualiza lista inicial ap√≥s um pequeno delay
        Clock.schedule_once(lambda dt: self.update_keys_display(), 0.2)
        
        return main_layout
    
    def validate_access_key(self, key):
        """Valida chave de acesso brasileira"""
        if not key or len(key) != 44 or not key.isdigit():
            return False
        
        try:
            base_key = key[:43]
            
            # Primeiro d√≠gito verificador
            weights1 = [2, 3, 4, 5, 6, 7, 8, 9] * 5 + [2, 3, 4]
            sum1 = sum(int(digit) * weight for digit, weight in zip(base_key, weights1))
            remainder1 = sum1 % 11
            dv1 = 0 if remainder1 < 2 else 11 - remainder1
            
            # Segundo d√≠gito verificador
            weights2 = [3, 4, 5, 6, 7, 8, 9] + [2, 3, 4, 5, 6, 7, 8, 9] * 4 + [2, 3, 4, 5]
            sum2 = sum(int(digit) * weight for digit, weight in zip(base_key + str(dv1), weights2))
            remainder2 = sum2 % 11
            dv2 = 0 if remainder2 < 2 else 11 - remainder2
            
            calculated_dv = f"{dv1}{dv2}"
            provided_dv = key[43:]
            
            return calculated_dv == provided_dv
            
        except Exception as e:
            print(f"Erro na valida√ß√£o: {e}")
            return False
    
    def process_qr_data(self, data):
        """Processa dados de QR code"""
        # Extrai chave fiscal
        match = re.search(r'p=([0-9]{44})', data)
        
        if not match:
            self.show_toast('QR Code n√£o cont√©m chave fiscal v√°lida', 'error')
            return
        
        key = match.group(1)
        
        if not self.validate_access_key(key):
            self.show_toast('Chave fiscal inv√°lida no QR Code', 'error')
            return
        
        # Verifica duplicata
        if any(item.key == key for item in self.saved_keys):
            if not self.rapid_mode:
                self.show_toast('Este cupom j√° foi lido anteriormente', 'warning')
            return
        
        # Salva chave
        new_key = SavedKey(key)
        self.saved_keys.insert(0, new_key)
        self.save_keys_to_file()
        
        if self.rapid_mode:
            self.show_toast(f'‚úì Cupom {len(self.saved_keys)} salvo!', 'success')
        else:
            self.show_toast('‚úì QR Code processado com sucesso!', 'success')
        
        self.update_keys_display()
    
    def process_image_with_cv2(self, image_path):
        """Processa imagem com OpenCV e pyzbar quando dispon√≠veis"""
        if not CV2_AVAILABLE or not PYZBAR_AVAILABLE:
            return False
        
        try:
            import cv2
            from pyzbar import pyzbar
            
            # Carrega e processa a imagem
            image = cv2.imread(image_path)
            if image is None:
                self.show_message("‚ùå Erro ao carregar imagem", "Erro")
                return False
            
            # Decodifica QR codes
            qr_codes = pyzbar.decode(image)
            
            if not qr_codes:
                self.show_message("‚ùå Nenhum QR Code encontrado na imagem", "Resultado")
                return False
            
            # Processa cada QR code encontrado
            for qr_code in qr_codes:
                qr_data = qr_code.data.decode('utf-8')
                
                # Extrai chave fiscal do QR code
                if len(qr_data) == 44 and qr_data.isdigit():
                    key = qr_data
                elif 'chNFe=' in qr_data:
                    # Extrai chave do formato URL
                    key = qr_data.split('chNFe=')[1].split('&')[0]
                else:
                    continue
                
                # Valida e salva a chave
                if self.validate_access_key(key):
                    if not any(item.key == key for item in self.saved_keys):
                        new_key = SavedKey(key)
                        self.saved_keys.insert(0, new_key)
                        self.save_keys_to_file()
                        self.update_keys_display()
                        self.show_message(f"‚úÖ Chave fiscal extra√≠da e salva com sucesso!\n\nChave: {key[:10]}...{key[-10:]}", "Sucesso")
                        return True
                    else:
                        self.show_message("‚ö†Ô∏è Esta chave j√° foi salva anteriormente", "Duplicada")
                        return True
                else:
                    self.show_message(f"‚ùå Chave fiscal inv√°lida encontrada no QR Code", "Erro")
            
            return False
            
        except Exception as e:
            self.show_message(f"‚ùå Erro ao processar imagem: {str(e)}", "Erro")
            return False
    
    def upload_image(self, instance):
        """Upload de imagem para processamento"""
        if not CV2_AVAILABLE or not PYZBAR_AVAILABLE:
            # Mensagem mais informativa sobre depend√™ncias
            deps_status = f"""
ÔøΩ Status das Depend√™ncias:
‚Ä¢ OpenCV: {'‚úÖ Dispon√≠vel' if CV2_AVAILABLE else '‚ùå N√£o encontrado'}
‚Ä¢ Pyzbar: {'‚úÖ Dispon√≠vel' if PYZBAR_AVAILABLE else '‚ùå N√£o encontrado'}

üí° Solu√ß√£o: Use "‚å®Ô∏è Entrada Manual" que funciona 100%!

üì± Nas pr√≥ximas vers√µes do APK, estas depend√™ncias estar√£o inclu√≠das.
"""
            self.show_message(deps_status, 'Depend√™ncias de Vis√£o Computacional')
            return
        
        # Layout do seletor
        layout = BoxLayout(orientation='vertical', spacing=dp(15), padding=dp(20))
        
        title = Label(
            text='üìÅ Selecionar Imagem',
            font_size=sp(18),
            size_hint_y=None,
            height=dp(40),
            halign='center'
        )
        title.bind(size=title.setter('text_size'))
        layout.add_widget(title)
        
        filechooser = FileChooserIconView(
            filters=['*.png', '*.jpg', '*.jpeg', '*.bmp']
        )
        layout.add_widget(filechooser)
        
        buttons = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(50), spacing=dp(10))
        
        select_btn = Button(
            text='‚úÖ Processar',
            background_color=COLORS['accent']
        )
        select_btn.bind(on_press=lambda x: self.process_selected_image(filechooser.selection, popup))
        buttons.add_widget(select_btn)
        
        cancel_btn = Button(
            text='‚ùå Cancelar',
            background_color=COLORS['error']
        )
        cancel_btn.bind(on_press=lambda x: popup.dismiss())
        buttons.add_widget(cancel_btn)
        
        layout.add_widget(buttons)
        
        popup = Popup(
            title='Upload de Imagem',
            content=layout,
            size_hint=(0.9, 0.8)
        )
        popup.open()
    
    def process_selected_image(self, selection, popup):
        """Processa imagem selecionada"""
        if not selection:
            self.show_message('‚ùå Selecione um arquivo', 'Erro')
            return
        
        popup.dismiss()
        
        # Usa o novo m√©todo inteligente de processamento
        file_path = selection[0]
        success = self.process_image_with_cv2(file_path)
        
        if not success and not CV2_AVAILABLE:
            self.show_message('‚ö†Ô∏è Depend√™ncias de vis√£o computacional n√£o dispon√≠veis\n\n‚úÖ Use "Entrada Manual" como alternativa', 'Aviso')
    
    def on_search_change(self, instance, text):
        """Atualiza busca em tempo real"""
        self.current_search = text
        self.update_keys_display()
    
    def update_keys_display(self):
        """Atualiza exibi√ß√£o das chaves em todas as telas"""
        # Atualiza o widget de chaves salvas em cada tela que possui um
        try:
            # Procura por widgets SavedKeysWidget em todas as telas
            root = self.root
            if hasattr(root, 'screen_manager'):
                for screen in root.screen_manager.screens:
                    for child in self._find_saved_keys_widgets(screen):
                        child.update_keys_list(self.saved_keys, self.current_search)
        except Exception as e:
            print(f"Erro ao atualizar display: {e}")
    
    def _find_saved_keys_widgets(self, widget):
        """Encontra widgets SavedKeysWidget recursivamente"""
        widgets = []
        if isinstance(widget, SavedKeysWidget):
            widgets.append(widget)
        
        if hasattr(widget, 'children'):
            for child in widget.children:
                widgets.extend(self._find_saved_keys_widgets(child))
        
        return widgets
    
    def copy_key(self, key_obj):
        """Copia chave para clipboard"""
        # Simula√ß√£o de c√≥pia (no Android usaria clipboard real)
        self.show_toast(f'Chave copiada: {key_obj.key[:20]}...', 'success')
    
    def delete_key(self, key_obj):
        """Exclui chave ap√≥s confirma√ß√£o"""
        try:
            self.saved_keys.remove(key_obj)
            self.save_keys_to_file()
            self.update_keys_display()
            self.show_toast('Chave exclu√≠da', 'success')
        except Exception as e:
            self.show_toast(f'Erro ao excluir: {str(e)}', 'error')
    
    def export_csv(self, instance):
        """Exporta chaves para CSV"""
        if not self.saved_keys:
            self.show_toast('Nenhuma chave para exportar', 'warning')
            return
        
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f'chaves_fiscais_{timestamp}.csv'
            
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(['Chave Fiscal', 'Data/Hora', 'Timestamp'])
                
                for key_obj in sorted(self.saved_keys, key=lambda x: x.timestamp, reverse=True):
                    writer.writerow([
                        key_obj.key,
                        key_obj.get_formatted_date(),
                        key_obj.timestamp
                    ])
            
            self.show_toast(f'‚úÖ Exportado: {filename}', 'success')
            
        except Exception as e:
            self.show_toast(f'Erro na exporta√ß√£o: {str(e)}', 'error')
    
    def show_toast(self, message, toast_type='info'):
        """Mostra toast r√°pido"""
        colors = {
            'success': COLORS['accent'],
            'error': COLORS['error'],
            'warning': COLORS['warning'],
            'info': COLORS['primary']
        }
        
        # Implementa√ß√£o simplificada de toast
        print(f"TOAST [{toast_type.upper()}]: {message}")
    
    def show_message(self, message, title='Informa√ß√£o'):
        """Mostra popup de mensagem"""
        layout = BoxLayout(orientation='vertical', spacing=dp(20), padding=dp(20))
        
        msg_label = Label(
            text=message,
            font_size=sp(14),
            halign='center'
        )
        msg_label.bind(size=msg_label.setter('text_size'))
        layout.add_widget(msg_label)
        
        ok_btn = Button(
            text='OK',
            size_hint_y=None,
            height=dp(50),
            background_color=COLORS['primary']
        )
        ok_btn.bind(on_press=lambda x: popup.dismiss())
        layout.add_widget(ok_btn)
        
        popup = Popup(
            title=title,
            content=layout,
            size_hint=(0.8, 0.4)
        )
        popup.open()
    
    def load_saved_keys(self):
        """Carrega chaves do JSON"""
        try:
            config_file = 'chaves_salvas.json'
            if os.path.exists(config_file):
                with open(config_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.saved_keys = [SavedKey.from_dict(item) for item in data]
            else:
                self.saved_keys = []
        except Exception as e:
            print(f"Erro ao carregar chaves: {e}")
            self.saved_keys = []
    
    def save_keys_to_file(self):
        """Salva chaves no JSON"""
        try:
            config_file = 'chaves_salvas.json'
            data = [key.to_dict() for key in self.saved_keys]
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"Erro ao salvar chaves: {e}")


if __name__ == '__main__':
    MercadoEmNumerosApp().run()