#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste Simplificado de Qualidade Android - Execut√°vel
Valida funcionalidades cr√≠ticas antes do deploy Git

Autor: Especialista em Testes QA
Data: Dezembro 2024
"""

import os
import sys
import time
from datetime import datetime

def check_file_structure():
    """Verifica estrutura de arquivos essenciais"""
    print("üîç Verificando estrutura de arquivos...")
    
    essential_files = {
        'main.py': 'Arquivo principal do aplicativo',
        'buildozer.spec': 'Configura√ß√£o de build Android'
    }
    
    optional_files = {
        'README.md': 'Documenta√ß√£o do projeto',
        'test_camera.py': 'Testes de c√¢mera',
        'test_desktop.py': 'Testes de desktop'
    }
    
    score = 100
    issues = []
    
    # Verifica arquivos essenciais
    for filename, description in essential_files.items():
        if os.path.exists(filename):
            file_size = os.path.getsize(filename)
            print(f"   ‚úÖ {filename} - {file_size} bytes - {description}")
            
            if file_size < 1000:
                issues.append(f"Arquivo {filename} muito pequeno ({file_size} bytes)")
                score -= 20
        else:
            print(f"   ‚ùå {filename} - AUSENTE - {description}")
            issues.append(f"Arquivo essencial ausente: {filename}")
            score -= 30
    
    # Verifica arquivos opcionais
    for filename, description in optional_files.items():
        if os.path.exists(filename):
            file_size = os.path.getsize(filename)
            print(f"   ‚úÖ {filename} - {file_size} bytes - {description}")
        else:
            print(f"   ‚ö†Ô∏è  {filename} - Opcional - {description}")
    
    return score, issues


def analyze_main_file():
    """Analisa arquivo principal do aplicativo"""
    print("\nüì± Analisando arquivo principal (main.py)...")
    
    if not os.path.exists('main.py'):
        print("   ‚ùå main.py n√£o encontrado")
        return 0, ["Arquivo main.py ausente"]
    
    try:
        with open('main.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        score = 100
        issues = []
        
        # Verifica√ß√µes cr√≠ticas
        critical_imports = [
            'kivy',
            'json',
            'os'
        ]
        
        # Funcionalidades essenciais
        essential_features = [
            'class',
            'def',
            'App',
            'run'
        ]
        
        # Android espec√≠ficos
        android_features = [
            'android',
            'Camera',
            'permissions'
        ]
        
        print("   üîç Verificando imports cr√≠ticos...")
        for imp in critical_imports:
            if imp in content:
                print(f"      ‚úÖ Import {imp} encontrado")
            else:
                print(f"      ‚ö†Ô∏è  Import {imp} n√£o encontrado")
                score -= 10
        
        print("   üîç Verificando funcionalidades essenciais...")
        for feature in essential_features:
            if feature in content:
                print(f"      ‚úÖ {feature} encontrado")
            else:
                print(f"      ‚ùå {feature} n√£o encontrado")
                issues.append(f"Funcionalidade essencial ausente: {feature}")
                score -= 15
        
        print("   üîç Verificando recursos Android...")
        android_score = 0
        for feature in android_features:
            if feature in content:
                print(f"      ‚úÖ {feature} encontrado")
                android_score += 1
            else:
                print(f"      ‚ö†Ô∏è  {feature} n√£o encontrado")
        
        if android_score == 0:
            issues.append("Nenhum recurso Android espec√≠fico encontrado")
            score -= 20
        
        # Verifica tamanho do c√≥digo
        lines = len(content.split('\n'))
        print(f"   üìè Linhas de c√≥digo: {lines}")
        
        if lines < 100:
            issues.append("C√≥digo muito pequeno - poss√≠vel implementa√ß√£o incompleta")
            score -= 15
        elif lines > 2000:
            issues.append("C√≥digo muito grande - considerar modulariza√ß√£o")
            score -= 5
        
        return score, issues
        
    except Exception as e:
        print(f"   ‚ùå Erro ao analisar main.py: {e}")
        return 0, [f"Erro na an√°lise: {e}"]


def analyze_buildozer_config():
    """Analisa configura√ß√£o do buildozer"""
    print("\nüèóÔ∏è Analisando configura√ß√£o Buildozer...")
    
    if not os.path.exists('buildozer.spec'):
        print("   ‚ùå buildozer.spec n√£o encontrado")
        return 0, ["Arquivo buildozer.spec ausente"]
    
    try:
        with open('buildozer.spec', 'r', encoding='utf-8') as f:
            content = f.read()
        
        score = 100
        issues = []
        
        # Configura√ß√µes obrigat√≥rias
        required_configs = [
            'title =',
            'package.name =',
            'source.main =',
            'requirements =',
            'android.permissions ='
        ]
        
        print("   üîç Verificando configura√ß√µes obrigat√≥rias...")
        for config in required_configs:
            if config in content:
                print(f"      ‚úÖ {config} configurado")
            else:
                print(f"      ‚ùå {config} ausente")
                issues.append(f"Configura√ß√£o obrigat√≥ria ausente: {config}")
                score -= 20
        
        # Permiss√µes Android essenciais
        essential_permissions = ['CAMERA', 'WRITE_EXTERNAL_STORAGE']
        
        print("   üîç Verificando permiss√µes Android...")
        for permission in essential_permissions:
            if permission in content:
                print(f"      ‚úÖ Permiss√£o {permission} configurada")
            else:
                print(f"      ‚ö†Ô∏è  Permiss√£o {permission} n√£o encontrada")
                issues.append(f"Permiss√£o recomendada ausente: {permission}")
                score -= 10
        
        # Verifica depend√™ncias
        if 'kivy' in content:
            print("      ‚úÖ Kivy configurado nas depend√™ncias")
        else:
            print("      ‚ùå Kivy n√£o encontrado nas depend√™ncias")
            issues.append("Kivy n√£o configurado como depend√™ncia")
            score -= 25
        
        return score, issues
        
    except Exception as e:
        print(f"   ‚ùå Erro ao analisar buildozer.spec: {e}")
        return 0, [f"Erro na an√°lise: {e}"]


def check_python_syntax():
    """Verifica sintaxe Python"""
    print("\nüêç Verificando sintaxe Python...")
    
    python_files = [f for f in os.listdir('.') if f.endswith('.py')]
    
    if not python_files:
        print("   ‚ùå Nenhum arquivo Python encontrado")
        return 0, ["Nenhum arquivo Python no projeto"]
    
    score = 100
    issues = []
    
    for py_file in python_files:
        if py_file.startswith('test_'):
            continue  # Pula arquivos de teste
        
        try:
            with open(py_file, 'r', encoding='utf-8') as f:
                code = f.read()
            
            # Tenta compilar para verificar sintaxe
            compile(code, py_file, 'exec')
            print(f"   ‚úÖ {py_file} - Sintaxe v√°lida")
            
        except SyntaxError as e:
            print(f"   ‚ùå {py_file} - Erro de sintaxe: {e}")
            issues.append(f"Erro de sintaxe em {py_file}: {e}")
            score -= 30
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  {py_file} - Aviso: {e}")
            score -= 5
    
    return score, issues


def evaluate_project_readiness():
    """Avalia prontid√£o do projeto"""
    print("\nüéØ Avaliando prontid√£o para deploy...")
    
    # Verifica se tem commits Git
    git_ready = os.path.exists('.git') or os.path.exists('../.git')
    
    # Verifica documenta√ß√£o
    docs_ready = os.path.exists('README.md')
    
    # Verifica se tem testes
    test_files = [f for f in os.listdir('.') if f.startswith('test_') and f.endswith('.py')]
    tests_ready = len(test_files) > 0
    
    readiness_score = 0
    readiness_items = []
    
    if git_ready:
        print("   ‚úÖ Reposit√≥rio Git detectado")
        readiness_score += 25
        readiness_items.append("Git configurado")
    else:
        print("   ‚ö†Ô∏è  Reposit√≥rio Git n√£o detectado")
    
    if docs_ready:
        print("   ‚úÖ Documenta√ß√£o (README.md) presente")
        readiness_score += 25
        readiness_items.append("Documenta√ß√£o presente")
    else:
        print("   ‚ö†Ô∏è  README.md n√£o encontrado")
    
    if tests_ready:
        print(f"   ‚úÖ {len(test_files)} arquivos de teste encontrados")
        readiness_score += 25
        readiness_items.append(f"{len(test_files)} testes")
    else:
        print("   ‚ö†Ô∏è  Nenhum arquivo de teste encontrado")
    
    # Build readiness
    build_ready = os.path.exists('buildozer.spec') and os.path.exists('main.py')
    
    if build_ready:
        print("   ‚úÖ Configura√ß√£o de build presente")
        readiness_score += 25
        readiness_items.append("Build configurado")
    else:
        print("   ‚ùå Configura√ß√£o de build incompleta")
    
    return readiness_score, readiness_items


def generate_final_report(results):
    """Gera relat√≥rio final de qualidade"""
    print("\n" + "=" * 80)
    print("üéØ RELAT√ìRIO FINAL DE QUALIDADE - LEITOR DE CUPONS FISCAIS ANDROID")
    print("=" * 80)
    
    # Informa√ß√µes gerais
    print(f"üìÖ Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"üìÅ Diret√≥rio: {os.getcwd()}")
    print(f"üêç Python: {sys.version.split()[0]}")
    
    # Resultados por categoria
    total_score = 0
    total_weight = 0
    
    categories = {
        'Estrutura de Arquivos': {'score': results.get('structure', 0), 'weight': 20},
        'C√≥digo Principal': {'score': results.get('main_code', 0), 'weight': 30},
        'Configura√ß√£o Build': {'score': results.get('buildozer', 0), 'weight': 25},
        'Sintaxe Python': {'score': results.get('syntax', 0), 'weight': 15},
        'Prontid√£o Deploy': {'score': results.get('readiness', 0), 'weight': 10}
    }
    
    print(f"\nüìä SCORES POR CATEGORIA:")
    print("-" * 50)
    
    for category, data in categories.items():
        score = data['score']
        weight = data['weight']
        
        weighted_score = (score * weight) / 100
        total_score += weighted_score
        total_weight += weight
        
        if score >= 90:
            status = "üü¢ EXCELENTE"
        elif score >= 75:
            status = "üü¢ BOM"
        elif score >= 60:
            status = "üü° REGULAR"
        elif score >= 40:
            status = "üü† PROBLEM√ÅTICO"
        else:
            status = "üî¥ CR√çTICO"
        
        print(f"{category:<25} {score:>3.0f}% - {status}")
    
    # Score geral
    overall_score = (total_score / total_weight) * 100
    
    print(f"\nüèÜ SCORE GERAL: {overall_score:.1f}%")
    
    if overall_score >= 90:
        final_status = "üü¢ EXCELENTE - APROVADO PARA PRODU√á√ÉO"
        recommendation = "Deploy imediato aprovado"
    elif overall_score >= 75:
        final_status = "üü¢ BOM - APROVADO PARA PRODU√á√ÉO"
        recommendation = "Deploy aprovado"
    elif overall_score >= 60:
        final_status = "üü° REGULAR - APROVADO CONDICIONALMENTE"
        recommendation = "Revisar avisos e deploy"
    elif overall_score >= 40:
        final_status = "üü† PROBLEM√ÅTICO - CORRE√á√ïES RECOMENDADAS"
        recommendation = "Corrigir problemas antes do deploy"
    else:
        final_status = "üî¥ CR√çTICO - CORRE√á√ïES OBRIGAT√ìRIAS"
        recommendation = "N√£o deploy at√© corre√ß√µes"
    
    print(f"\nüéØ STATUS: {final_status}")
    print(f"üìã RECOMENDA√á√ÉO: {recommendation}")
    
    # Pr√≥ximos passos
    print(f"\nüöÄ PR√ìXIMOS PASSOS RECOMENDADOS:")
    print("-" * 50)
    
    if overall_score >= 75:
        print("1. ‚úÖ buildozer android clean")
        print("2. ‚úÖ buildozer android debug")
        print("3. ‚úÖ Testar APK em dispositivo Android")
        print("4. ‚úÖ git add . && git commit -m 'Release version'")
        print("5. ‚úÖ git push origin main")
    elif overall_score >= 60:
        print("1. ‚ö†Ô∏è  Revisar avisos identificados")
        print("2. ‚ö†Ô∏è  buildozer android debug (teste)")
        print("3. ‚ö†Ô∏è  Validar funcionalidades cr√≠ticas")
        print("4. ‚ö†Ô∏è  Deploy ap√≥s valida√ß√£o")
    else:
        print("1. ‚ùå Corrigir problemas cr√≠ticos")
        print("2. ‚ùå Re-executar testes")
        print("3. ‚ùå N√£o deploy at√© score >= 60%")
    
    # Todos os problemas encontrados
    all_issues = []
    for category_issues in results.get('all_issues', []):
        all_issues.extend(category_issues)
    
    if all_issues:
        print(f"\n‚ö†Ô∏è  PROBLEMAS IDENTIFICADOS ({len(all_issues)}):")
        print("-" * 50)
        for i, issue in enumerate(all_issues[:10], 1):  # Mostra at√© 10 problemas
            print(f"{i:2d}. {issue}")
        
        if len(all_issues) > 10:
            print(f"    ... e mais {len(all_issues) - 10} problemas")
    
    return overall_score >= 60  # Aprovado se score >= 60%


def main():
    """Fun√ß√£o principal de testes"""
    print("üéØ ESPECIALISTA EM TESTES QA - VALIDA√á√ÉO ANDROID SIMPLIFICADA")
    print("=" * 80)
    print("üì± Projeto: Leitor de Cupons Fiscais Android")
    print("üéØ Objetivo: Validar qualidade antes do deploy Git")
    print("=" * 80)
    
    start_time = time.time()
    results = {}
    all_issues = []
    
    try:
        # 1. Estrutura de arquivos
        print("\nüìÅ FASE 1: ESTRUTURA DE ARQUIVOS")
        print("=" * 50)
        structure_score, structure_issues = check_file_structure()
        results['structure'] = structure_score
        all_issues.append(structure_issues)
        
        # 2. An√°lise do c√≥digo principal
        print("\nüíª FASE 2: C√ìDIGO PRINCIPAL")
        print("=" * 50)
        main_score, main_issues = analyze_main_file()
        results['main_code'] = main_score
        all_issues.append(main_issues)
        
        # 3. Configura√ß√£o do buildozer
        print("\nüîß FASE 3: CONFIGURA√á√ÉO BUILD")
        print("=" * 50)
        buildozer_score, buildozer_issues = analyze_buildozer_config()
        results['buildozer'] = buildozer_score
        all_issues.append(buildozer_issues)
        
        # 4. Sintaxe Python
        print("\nüêç FASE 4: SINTAXE PYTHON")
        print("=" * 50)
        syntax_score, syntax_issues = check_python_syntax()
        results['syntax'] = syntax_score
        all_issues.append(syntax_issues)
        
        # 5. Prontid√£o para deploy
        print("\nüöÄ FASE 5: PRONTID√ÉO DEPLOY")
        print("=" * 50)
        readiness_score, readiness_items = evaluate_project_readiness()
        results['readiness'] = readiness_score
        
        # Adiciona todos os problemas
        results['all_issues'] = all_issues
        
        # Gera relat√≥rio final
        approved = generate_final_report(results)
        
        duration = time.time() - start_time
        print(f"\n‚è±Ô∏è  Tempo total de execu√ß√£o: {duration:.2f} segundos")
        
        if approved:
            print(f"\nüéâ PROJETO APROVADO PARA GIT DEPLOY!")
            return True
        else:
            print(f"\n‚õî PROJETO N√ÉO APROVADO - Corre√ß√µes necess√°rias")
            return False
            
    except Exception as e:
        print(f"\nüí• ERRO CR√çTICO: {e}")
        return False


if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)