name: üöÄ BUILD FOR√áADO - Vers√£o Limpa
on:
  workflow_dispatch:
    inputs:
      force_latest:
        description: 'For√ßar uso da vers√£o mais recente'
        required: false
        default: true
        type: boolean

jobs:
  build-forcado:
    runs-on: ubuntu-20.04
    timeout-minutes: 90
    
    steps:
    - name: üîÑ Checkout FOR√áADO da vers√£o mais recente
      uses: actions/checkout@v4
      with:
        ref: main  # For√ßa checkout da main
        fetch-depth: 1
        clean: true  # Limpa qualquer cache
    
    - name: üßπ Verifica√ß√£o de Limpeza
      run: |
        echo "=== VERIFICANDO ARQUIVOS ATUAIS ==="
        ls -la
        
        echo "=== ARQUIVOS PYTHON ==="
        find . -name "*.py" -type f
        
        echo "=== VERIFICANDO SE ARQUIVOS PROBLEM√ÅTICOS FORAM REMOVIDOS ==="
        if [ -f "main_backup.py" ]; then
          echo "‚ùå ERRO: main_backup.py ainda existe!"
          exit 1
        fi
        
        if [ -f "test_master_qa.py" ]; then
          echo "‚ùå ERRO: test_master_qa.py ainda existe!"
          exit 1
        fi
        
        if [ -f "main_novo.py" ]; then
          echo "‚ùå ERRO: main_novo.py ainda existe!"
          exit 1
        fi
        
        echo "‚úÖ VERIFICA√á√ÉO PASSOU - Arquivos problem√°ticos removidos"
        
        echo "=== VALIDANDO main.py ==="
        if [ -f "main.py" ]; then
          echo "‚úÖ main.py existe"
          head -20 main.py
        else
          echo "‚ùå main.py n√£o encontrado!"
          exit 1
        fi
    
    - name: üêç Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10.12'
    
    - name: ‚òï Setup Java 8
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '8'
    
    - name: üì¶ Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq \
          git zip unzip wget curl \
          build-essential autoconf libtool \
          pkg-config zlib1g-dev libffi-dev \
          libssl-dev python3-dev openjdk-8-jdk
    
    - name: üîß Environment Setup
      run: |
        echo "JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64" >> $GITHUB_ENV
        echo "BUILDOZER_AUTO_ACCEPT_ANDROID_SDK_LICENSE=1" >> $GITHUB_ENV
    
    - name: üêç Install Python Tools
      run: |
        python3 -m pip install --upgrade pip==23.3.1
        pip install setuptools==68.2.2
        pip install wheel==0.41.2
        pip install cython==0.29.36
        pip install buildozer==1.4.0
        
        echo "=== VERIFICA√á√ÉO FINAL ==="
        buildozer --version
        python3 --version
    
    - name: üìã Verificar buildozer.spec
      run: |
        echo "=== BUILDOZER.SPEC ATUAL ==="
        cat buildozer.spec
        
        echo "=== VERIFICANDO EXCLUS√ïES ==="
        grep -A 10 "source.exclude" buildozer.spec || echo "Sem exclus√µes definidas"
    
    - name: üßº Clean Everything
      run: |
        rm -rf .buildozer
        rm -rf bin
        rm -rf dist
        find . -name "*.pyc" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
    
    - name: üî® Build APK LIMPO
      timeout-minutes: 75
      run: |
        export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
        export GRADLE_OPTS="-Xmx1g -Dorg.gradle.daemon=false"
        
        echo "üöÄ INICIANDO BUILD COM PROJETO LIMPO"
        
        timeout 4500s bash -c 'yes | buildozer android debug' || {
          echo "‚ùå Build falhou, analisando logs..."
          
          echo "=== LOGS BUILDOZER ==="
          find .buildozer -name "*.log" -exec echo "=== {} ===" \; -exec tail -100 {} \; 2>/dev/null || true
          
          echo "=== ARQUIVO QUE CAUSOU ERRO ==="
          find .buildozer -name "*app*" -type d -exec find {} -name "*.py" \; 2>/dev/null | head -20
          
          exit 1
        }
    
    - name: üîç Encontrar APK
      run: |
        echo "=== PROCURANDO APK ==="
        find . -name "*.apk" -type f -ls
        
        mkdir -p dist
        
        APK_FILE=$(find . -name "*.apk" -type f | head -1)
        if [ -n "$APK_FILE" ]; then
          echo "‚úÖ APK encontrado: $APK_FILE"
          cp "$APK_FILE" "dist/LeitorQR-Limpo-$(date +%Y%m%d-%H%M).apk"
          ls -lh dist/
        else
          echo "‚ùå APK n√£o encontrado"
          exit 1
        fi
    
    - name: üì§ Upload APK de Sucesso
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: apk-projeto-limpo-${{ github.run_number }}
        path: dist/*.apk
        retention-days: 30
    
    - name: üì§ Upload Logs de Erro
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: logs-erro-${{ github.run_number }}
        path: |
          .buildozer/**/*.log
          buildozer.spec
        retention-days: 7