name: 🎯 BUILD DEFINITIVO APK
on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Build completamente limpo'
        required: false
        default: true
        type: boolean

jobs:
  build-apk-definitivo:
    runs-on: ubuntu-20.04
    timeout-minutes: 90
    
    env:
      JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
      BUILDOZER_AUTO_ACCEPT_ANDROID_SDK_LICENSE: 1
    
    steps:
    - name: 🗑️ Limpeza Radical do Sistema
      run: |
        echo "=== LIMPEZA AGRESSIVA ==="
        sudo rm -rf /opt/hostedtoolcache/Python/3.11* || true
        sudo rm -rf /opt/hostedtoolcache/Python/3.9* || true
        sudo rm -rf /usr/local/lib/android/sdk/ndk/* || true
        sudo rm -rf /usr/share/dotnet || true
        sudo rm -rf /opt/ghc || true
        sudo rm -rf /usr/local/share/boost || true
        
        # Limpa cache de ações
        sudo rm -rf /home/runner/.cache/* || true
        sudo rm -rf /tmp/* || true
        
        echo "=== ESPAÇO APÓS LIMPEZA ==="
        df -h
    
    - name: � Checkout Forçado e Limpo
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 1
        clean: true
        force: true
    
    - name: 🚨 VERIFICAÇÃO CRÍTICA DE ARQUIVOS
      run: |
        echo "=== VERIFICAÇÃO FINAL DE LIMPEZA ==="
        
        # Lista TODOS os arquivos Python
        echo "📂 Arquivos Python encontrados:"
        find . -name "*.py" -type f | sort
        
        # Verifica arquivos PROIBIDOS
        FORBIDDEN_FILES=(
          "main_backup.py"
          "main_complex.py"
          "main_moderno.py"
          "main_novo.py"
          "test_master_qa.py"
          "test_upload.py"
          "build_apk.py"
          "android_simulator.py"
          "deploy_validation.py"
        )
        
        echo "🔍 Verificando arquivos proibidos..."
        FOUND_FORBIDDEN=false
        for file in "${FORBIDDEN_FILES[@]}"; do
          if [ -f "$file" ]; then
            echo "❌ ERRO CRÍTICO: Arquivo proibido encontrado: $file"
            FOUND_FORBIDDEN=true
          fi
        done
        
        if [ "$FOUND_FORBIDDEN" = true ]; then
          echo "🚫 BUILD CANCELADO: Arquivos problemáticos ainda existem!"
          exit 1
        fi
        
        echo "✅ VERIFICAÇÃO PASSOU: Apenas arquivos limpos encontrados"
        
        # Verifica se main_final.py existe
        if [ ! -f "main_final.py" ]; then
          echo "❌ ERRO: main_final.py não encontrado!"
          exit 1
        fi
        
        echo "✅ main_final.py confirmado"
    
    - name: 🔄 Preparação dos Arquivos Finais
      run: |
        echo "=== PREPARAÇÃO FINAL ==="
        
        # Remove arquivos existentes
        rm -f main.py buildozer.spec
        
        # Usa os arquivos definitivos e limpos
        cp main_final.py main.py
        cp buildozer_limpo.spec buildozer.spec
        
        # Remove arquivos desnecessários
        rm -f main_final.py buildozer_definitivo.spec buildozer_limpo.spec
        
        # Lista final
        echo "📁 Estrutura final:"
        ls -la *.py *.spec
        
        echo "📋 Conteúdo buildozer.spec:"
        cat buildozer.spec
    
    - name: 🐍 Python 3.10 Setup
      uses: actions/setup-python@v5
      with:
        python-version: '3.10.12'
    
    - name: ☕ Java 8 Setup
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y openjdk-8-jdk
        
        echo "JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64" >> $GITHUB_ENV
        export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
        
        echo "🔧 Java configurado:"
        java -version
    
    - name: 📦 Dependencies Ubuntu 20.04
      run: |
        sudo apt-get install -y -qq \
          git zip unzip wget curl \
          build-essential autoconf libtool \
          pkg-config zlib1g-dev libffi-dev \
          libssl-dev python3-dev
    
    - name: 🛠️ Python Environment
      run: |
        python3 -m pip install --upgrade pip==23.3.1
        pip install setuptools==68.2.2 wheel==0.41.2
        pip install cython==0.29.36
        pip install buildozer==1.4.0
        
        # Dependências específicas
        pip install colorama appdirs sh jinja2
        
        echo "✅ Ambiente Python configurado:"
        python3 --version
        buildozer --version
    
    - name: � Clean Build Environment
      run: |
        # Remove qualquer cache/build existente
        rm -rf .buildozer bin dist __pycache__
        find . -name "*.pyc" -delete
        find . -name "*.pyo" -delete
        
        echo "🧽 Ambiente de build limpo"
    
    - name: � BUILD APK - Configuração Definitiva
      timeout-minutes: 75
      run: |
        echo "🎯 INICIANDO BUILD DEFINITIVO"
        
        # Configurações de ambiente otimizadas
        export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
        export GRADLE_OPTS="-Xmx1024m -Dorg.gradle.daemon=false"
        export ANDROIDAPI="28"
        export ANDROIDMINAPI="21"
        
        # Build com timeout e logs detalhados
        timeout 4200s bash -c '
          echo "yes" | buildozer android debug || {
            echo "❌ BUILD FALHOU - Analisando causa..."
            
            echo "=== LOGS PRINCIPAIS ==="
            find .buildozer -name "*.log" -type f -exec echo "📄 {}" \; -exec tail -50 {} \; 2>/dev/null
            
            echo "=== ARQUIVOS NO DIRETÓRIO APP ==="
            find .buildozer -path "*/android/app/*" -name "*.py" -type f 2>/dev/null || true
            
            echo "=== VERIFICAÇÃO DE SINTAXE ==="
            python3 -m py_compile main.py || echo "ERRO DE SINTAXE EM main.py"
            
            exit 1
          }
        '
        
        echo "✅ BUILD CONCLUÍDO COM SUCESSO!"
    
    - name: � Localizar e Preparar APK
      run: |
        echo "🔍 Procurando APK gerado..."
        
        APK_FILES=$(find . -name "*.apk" -type f)
        
        if [ -z "$APK_FILES" ]; then
          echo "❌ NENHUM APK ENCONTRADO!"
          echo "📂 Estrutura do diretório bin:"
          find .buildozer -type d -name "*bin*" -exec ls -la {} \; 2>/dev/null || true
          exit 1
        fi
        
        # Prepara diretório de saída
        mkdir -p apk_final
        
        # Processa cada APK encontrado
        for apk in $APK_FILES; do
          echo "📱 APK encontrado: $apk"
          
          # Info do arquivo
          ls -lh "$apk"
          file "$apk"
          
          # Nomeia o APK final
          APK_NAME="LeitorQR-Fiscal-v1.0-$(date +%Y%m%d-%H%M).apk"
          cp "$apk" "apk_final/$APK_NAME"
          
          echo "✅ APK preparado: apk_final/$APK_NAME"
        done
        
        echo "📋 APKs finais:"
        ls -lh apk_final/
    
    - name: 🎉 Upload APK Final
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: leitor-qr-fiscal-apk-${{ github.run_number }}
        path: apk_final/*.apk
        retention-days: 90
        compression-level: 0
    
    - name: � Upload Logs (Se falha)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          .buildozer/**/*.log
          buildozer.spec
          main.py
        retention-days: 30
    
    - name: 📈 Resumo Final
      if: always()
      run: |
        echo "=== RESUMO DO BUILD ==="
        echo "📅 Data: $(date)"
        echo "🔧 Python: $(python3 --version)"
        echo "☕ Java: $(java -version 2>&1 | head -1)"
        echo "🛠️ Buildozer: $(buildozer --version)"
        echo "📊 Status: ${{ job.status }}"
        
        if [ -d "apk_final" ]; then
          echo "📱 APKs gerados:"
          ls -lh apk_final/ || true
        fi